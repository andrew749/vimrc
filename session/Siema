let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <Plug>(neocomplcache_start_omni_complete) 
inoremap <silent> <Plug>(neocomplcache_start_auto_complete_no_select) 
inoremap <silent> <Plug>(neocomplcache_start_auto_complete) =neocomplcache#mappings#popup_post()
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_quick_match) unite#sources#neocomplcache#start_quick_match()
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_complete) unite#sources#neocomplcache#start_complete()
inoremap <Plug>ZenCodingAnchorizeSummary :call zencoding#anchorizeURL(1)a
inoremap <Plug>ZenCodingAnchorizeURL :call zencoding#anchorizeURL(0)a
inoremap <Plug>ZenCodingRemoveTag :call zencoding#removeTag()a
inoremap <Plug>ZenCodingSplitJoinTagInsert :call zencoding#splitJoinTag()
inoremap <Plug>ZenCodingToggleComment :call zencoding#toggleComment()a
inoremap <Plug>ZenCodingImageSize :call zencoding#imageSize()a
inoremap <Plug>ZenCodingPrev :call zencoding#moveNextPrev(1)
inoremap <Plug>ZenCodingNext :call zencoding#moveNextPrev(0)
inoremap <Plug>ZenCodingBalanceTagOutwardInsert :call zencoding#balanceTag(-1)
inoremap <Plug>ZenCodingBalanceTagInwardInsert :call zencoding#balanceTag(1)
inoremap <Plug>ZenCodingExpandWord u:call zencoding#expandAbbr(1,"")a
inoremap <Plug>ZenCodingExpandAbbr u:call zencoding#expandAbbr(0,"")a
inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")
inoremap <silent> <SNR>64_AutoPairsReturn =AutoPairsReturn()
inoremap <silent> <expr> <Plug>(neosnippet_start_unite_snippet) unite#sources#snippet#start_complete()
inoremap <silent> <expr> <Plug>(neosnippet_jump) neosnippet#jump_impl()
inoremap <silent> <expr> <Plug>(neosnippet_expand) neosnippet#expand_impl()
inoremap <silent> <expr> <Plug>(neosnippet_jump_or_expand) neosnippet#jump_or_expand_impl()
inoremap <silent> <expr> <Plug>(neosnippet_expand_or_jump) neosnippet#expand_or_jump_impl()
imap <expr> <BS> neocomplcache#smart_close_popup()."\"
imap <expr> <S-Tab> pumvisible() ? "\" : "\	"
imap <C-Space> <Plug>(neosnippet_expand_or_jump)
map! <S-Insert> <MiddleMouse>
nmap  <Plug>DWMClose
nmap  <Plug>DWMShrinkMaster
vmap 	 >gv
nnoremap <NL> w
nnoremap  W
nmap  <Plug>DWMGrowMaster
nmap  <Plug>DWMNew
nnoremap <silent>  :CtrlP
nmap  :q
nmap  :bw
vmap c <Plug>ZenCodingCodePretty
vmap m <Plug>ZenCodingMergeLines
vmap D <Plug>ZenCodingBalanceTagOutwardVisual
vmap d <Plug>ZenCodingBalanceTagInwardVisual
vmap , <Plug>ZenCodingExpandVisual
nmap A <Plug>ZenCodingAnchorizeSummary
nmap a <Plug>ZenCodingAnchorizeURL
nmap k <Plug>ZenCodingRemoveTag
nmap j <Plug>ZenCodingSplitJoinTagNormal
nmap / <Plug>ZenCodingToggleComment
nmap i <Plug>ZenCodingImageSize
nmap N <Plug>ZenCodingPrev
nmap n <Plug>ZenCodingNext
nmap D <Plug>ZenCodingBalanceTagOutwardNormal
nmap d <Plug>ZenCodingBalanceTagInwardNormal
nmap , <Plug>ZenCodingExpandNormal
vmap <silent>   zf
nmap <silent>   za
nmap <silent> <expr> $ ScreenMovement("$")
omap <silent> <expr> $ ScreenMovement("$")
nmap ,ca <Plug>NERDCommenterAltDelims
xmap ,cu <Plug>NERDCommenterUncomment
nmap ,cu <Plug>NERDCommenterUncomment
xmap ,cb <Plug>NERDCommenterAlignBoth
nmap ,cb <Plug>NERDCommenterAlignBoth
xmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cA <Plug>NERDCommenterAppend
xmap ,cy <Plug>NERDCommenterYank
nmap ,cy <Plug>NERDCommenterYank
xmap ,cs <Plug>NERDCommenterSexy
nmap ,cs <Plug>NERDCommenterSexy
xmap ,ci <Plug>NERDCommenterInvert
nmap ,ci <Plug>NERDCommenterInvert
nmap ,c$ <Plug>NERDCommenterToEOL
xmap ,cn <Plug>NERDCommenterNested
nmap ,cn <Plug>NERDCommenterNested
xmap ,cm <Plug>NERDCommenterMinimal
nmap ,cm <Plug>NERDCommenterMinimal
xmap ,c  <Plug>NERDCommenterToggle
nmap ,c  <Plug>NERDCommenterToggle
xmap ,cc <Plug>NERDCommenterComment
nmap ,cc <Plug>NERDCommenterComment
nmap <silent> ,mr :MultieditReset
nmap <silent> ,md :MultieditClear
nmap ,C :Multiedit!
nmap ,M :Multiedit
nmap ,mu :MultieditRestore
nmap ,mm viw:MultieditAddRegion
vmap ,m :MultieditAddRegion  
nmap ,mI ^:MultieditAddMark i
nmap ,mA $:MultieditAddMark a
nmap ,mO O:MultieditAddMark i
nmap ,mo o:MultieditAddMark i
nmap ,mi :MultieditAddMark i
nmap ,ma :MultieditAddMark a
nnoremap ,r :InteractiveReplace
vnoremap <silent> ,ew :call EasyMotion#WB(1, 0)
onoremap <silent> ,ew :call EasyMotion#WB(0, 0)
nnoremap <silent> ,ew :call EasyMotion#WB(0, 0)
vnoremap <silent> ,et :call EasyMotion#T(1, 0)
onoremap <silent> ,et :call EasyMotion#T(0, 0)
nnoremap <silent> ,et :call EasyMotion#T(0, 0)
vnoremap <silent> ,en :call EasyMotion#Search(1, 0)
onoremap <silent> ,en :call EasyMotion#Search(0, 0)
nnoremap <silent> ,en :call EasyMotion#Search(0, 0)
vnoremap <silent> ,ek :call EasyMotion#JK(1, 1)
onoremap <silent> ,ek :call EasyMotion#JK(0, 1)
nnoremap <silent> ,ek :call EasyMotion#JK(0, 1)
vnoremap <silent> ,ej :call EasyMotion#JK(1, 0)
onoremap <silent> ,ej :call EasyMotion#JK(0, 0)
nnoremap <silent> ,ej :call EasyMotion#JK(0, 0)
vnoremap <silent> ,egE :call EasyMotion#EW(1, 1)
onoremap <silent> ,egE :call EasyMotion#EW(0, 1)
nnoremap <silent> ,egE :call EasyMotion#EW(0, 1)
vnoremap <silent> ,ef :call EasyMotion#F(1, 0)
onoremap <silent> ,ef :call EasyMotion#F(0, 0)
nnoremap <silent> ,ef :call EasyMotion#F(0, 0)
vnoremap <silent> ,ee :call EasyMotion#E(1, 0)
onoremap <silent> ,ee :call EasyMotion#E(0, 0)
nnoremap <silent> ,ee :call EasyMotion#E(0, 0)
vnoremap <silent> ,eb :call EasyMotion#WB(1, 1)
onoremap <silent> ,eb :call EasyMotion#WB(0, 1)
nnoremap <silent> ,eb :call EasyMotion#WB(0, 1)
vnoremap <silent> ,eW :call EasyMotion#WBW(1, 0)
onoremap <silent> ,eW :call EasyMotion#WBW(0, 0)
nnoremap <silent> ,eW :call EasyMotion#WBW(0, 0)
vnoremap <silent> ,eT :call EasyMotion#T(1, 1)
onoremap <silent> ,eT :call EasyMotion#T(0, 1)
nnoremap <silent> ,eT :call EasyMotion#T(0, 1)
vnoremap <silent> ,eN :call EasyMotion#Search(1, 1)
onoremap <silent> ,eN :call EasyMotion#Search(0, 1)
nnoremap <silent> ,eN :call EasyMotion#Search(0, 1)
vnoremap <silent> ,ege :call EasyMotion#E(1, 1)
onoremap <silent> ,ege :call EasyMotion#E(0, 1)
nnoremap <silent> ,ege :call EasyMotion#E(0, 1)
vnoremap <silent> ,eF :call EasyMotion#F(1, 1)
onoremap <silent> ,eF :call EasyMotion#F(0, 1)
nnoremap <silent> ,eF :call EasyMotion#F(0, 1)
vnoremap <silent> ,eE :call EasyMotion#EW(1, 0)
onoremap <silent> ,eE :call EasyMotion#EW(0, 0)
nnoremap <silent> ,eE :call EasyMotion#EW(0, 0)
vnoremap <silent> ,eB :call EasyMotion#WBW(1, 1)
onoremap <silent> ,eB :call EasyMotion#WBW(0, 1)
nnoremap <silent> ,eB :call EasyMotion#WBW(0, 1)
map ,ff :call ToggleFold()
nmap ,d :call DualView()
nmap <silent> ,ss :call ToggleSpell()
nmap ,u :UndotreeToggle
nmap <silent> ,T :TagbarToggle
nmap <silent> ,nt :NERDTreeMirrorToggle
nmap <silent> ,p :MDP
nmap ,css :w | !lessc % > %:t:r.css 
nmap <silent> ,gp :Git push
nmap <silent> ,gl :Glog
nmap <silent> ,gb :Gblame
nmap <silent> ,gc :Gcommit
nmap <silent> ,gd :Gdiff
nmap <silent> ,gs :Gstatus
nmap ,m :CtrlPMRUFiles
nmap ,b :CtrlPBuffer
nmap ,4 yypVr-
nmap ,3 yypVr=
nmap ,2 yyPVr-jyypVr-
nmap ,1 yyPVr=jyypVr=
nmap <silent> ,tw :set invwrap:set wrap?
vmap ,y "+y
vmap ,d "+x
map ,cd :cd %:p:h
map ,s? z=
map ,sa zg
map ,sp [s
map ,sn ]s
nmap ,ac :center
nmap ,ar :right
nmap ,al :left
nmap ,/ :noh
nmap <silent> ,L :set nolist!
smap <silent> ,cl :call CalcLine(".")
omap <silent> ,cl :call CalcLine(".")
nmap <silent> <expr> 0 ScreenMovement("0")
omap <silent> <expr> 0 ScreenMovement("0")
vmap < <gv
vmap > >gv
nmap Q gqap
vmap Q gq
xmap S <Plug>VSurround
map [m :MultieditHop -1
vmap [% [%m'gv``
map ]m :MultieditHop 1
vmap ]% ]%m'gv``
nmap <silent> <expr> ^ ScreenMovement("^")
omap <silent> <expr> ^ ScreenMovement("^")
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap gS <Plug>VgSurround
nmap <silent> <expr> j ScreenMovement("j")
omap <silent> <expr> j ScreenMovement("j")
nmap <silent> <expr> k ScreenMovement("k")
omap <silent> <expr> k ScreenMovement("k")
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
vmap ~ ygv"=TwiddleCase(@")Pgv
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
vnoremap <Plug>ZenCodingCodePretty :call zencoding#codePretty()
vnoremap <Plug>ZenCodingMergeLines :call zencoding#mergeLines()
vnoremap <Plug>ZenCodingBalanceTagOutwardVisual :call zencoding#balanceTag(-2)
vnoremap <Plug>ZenCodingBalanceTagInwardVisual :call zencoding#balanceTag(2)
vnoremap <Plug>ZenCodingExpandVisual :call zencoding#expandAbbr(2,"")
nnoremap <Plug>ZenCodingAnchorizeSummary :call zencoding#anchorizeURL(1)
nnoremap <Plug>ZenCodingAnchorizeURL :call zencoding#anchorizeURL(0)
nnoremap <Plug>ZenCodingRemoveTag :call zencoding#removeTag()
nnoremap <Plug>ZenCodingSplitJoinTagNormal :call zencoding#splitJoinTag()
nnoremap <Plug>ZenCodingToggleComment :call zencoding#toggleComment()
nnoremap <Plug>ZenCodingImageSize :call zencoding#imageSize()
nnoremap <Plug>ZenCodingPrev :call zencoding#moveNextPrev(1)
nnoremap <Plug>ZenCodingNext :call zencoding#moveNextPrev(0)
nnoremap <Plug>ZenCodingBalanceTagOutwardNormal :call zencoding#balanceTag(-1)
nnoremap <Plug>ZenCodingBalanceTagInwardNormal :call zencoding#balanceTag(1)
nnoremap <Plug>ZenCodingExpandWord :call zencoding#expandAbbr(1,"")
nnoremap <Plug>ZenCodingExpandNormal :call zencoding#expandAbbr(3,"")
nnoremap <silent> <Plug>SurroundRepeat .
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
xnoremap <silent> <Plug>(neosnippet_register_oneshot_snippet) :call neosnippet#register_oneshot_snippet()
xnoremap <silent> <expr> <Plug>(neosnippet_start_unite_snippet_target) unite#sources#snippet_target#start()
xnoremap <silent> <Plug>(neosnippet_expand_target) :call neosnippet#expand_target()
xnoremap <silent> <Plug>(neosnippet_get_selected_text) :call neosnippet#get_selected_text(visualmode(), 1)
snoremap <silent> <expr> <Plug>(neosnippet_jump) neosnippet#jump_impl()
snoremap <silent> <expr> <Plug>(neosnippet_expand) neosnippet#expand_impl()
snoremap <silent> <expr> <Plug>(neosnippet_jump_or_expand) neosnippet#jump_or_expand_impl()
snoremap <silent> <expr> <Plug>(neosnippet_expand_or_jump) neosnippet#expand_or_jump_impl()
nmap <C-Space> <Plug>DWMFocus
nmap <Nul> <Plug>DWMFocus
nmap <C-.> <Plug>DWMRotateClockwise
nmap <C-,> <Plug>DWMRotateCounterclockwise
nnoremap <silent> <Plug>DWMShrinkMaster :call DWM_ShrinkMaster()
nnoremap <silent> <Plug>DWMGrowMaster :call DWM_GrowMaster()
nnoremap <silent> <Plug>DWMFocus :call DWM_Focus()
nnoremap <silent> <Plug>DWMClose :exec DWM_Close()
nnoremap <silent> <Plug>DWMNew :call DWM_New()
nnoremap <silent> <Plug>DWMRotateClockwise :call DWM_Rotate(1)
nnoremap <silent> <Plug>DWMRotateCounterclockwise :call DWM_Rotate(0)
smap <C-Space> <Plug>(neosnippet_expand_or_jump)
nmap <C-Tab> :bnext
nmap <C-S-Tab> :bprev
vmap <S-Tab> <gv
nmap <F8> :if &go=~#'m'|set go-=m|else|set go+=m|endif
map <S-Insert> <MiddleMouse>
imap S <Plug>ISurround
imap s <Plug>Isurround
imap <expr> 	 pumvisible() ? "\" : "\	"
imap  <Plug>Isurround
imap A <Plug>ZenCodingAnchorizeSummary
imap a <Plug>ZenCodingAnchorizeURL
imap k <Plug>ZenCodingRemoveTag
imap j <Plug>ZenCodingSplitJoinTagInsert
imap / <Plug>ZenCodingToggleComment
imap i <Plug>ZenCodingImageSize
imap N <Plug>ZenCodingPrev
imap n <Plug>ZenCodingNext
imap D <Plug>ZenCodingBalanceTagOutwardInsert
imap d <Plug>ZenCodingBalanceTagInwardInsert
imap ; <Plug>ZenCodingExpandWord
imap , <Plug>ZenCodingExpandAbbr
cmap ,p +
imap ,p *
imap ,e 
imap jj 
cmap w!! :w !sudo tee % >/dev/null
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set autoread
set autowrite
set background=dark
set backspace=2
set clipboard=unnamedplus
set completefunc=neocomplcache#complete#manual_complete
set completeopt=menu
set copyindent
set diffopt=filler,iwhite
set display=lastline
set expandtab
set fileencodings=utf-8
set fileformats=unix,mac,dos
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
set formatoptions=croql
set gdefault
set guicursor=a:blinkon0
set guifont=Menlo\ for\ Powerline\ 10
set guioptions=ac
set guitablabel=%t
set helplang=pt
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set listchars=precedes:«,extends:»,trail:⠿,eol:·,tab:→\\
set matchpairs=(:),{:},[:],<:>
set matchtime=2
set mouse=a
set mousemodel=popup
set pastetoggle=<F2>
set printoptions=paper:a4,syntax:n
set report=0
set ruler
set runtimepath=~/.vim/bundle/vundle,~/.vim/bundle/powerline,~/.vim/bundle/vim-easymotion,~/.vim/bundle/nerdtree,~/.vim/bundle/vim-nerdtree-tabs,~/.vim/bundle/ctrlp.vim,~/.vim/bundle/matchit.zip,~/.vim/bundle/undotree,~/.vim/bundle/dwm.vim,~/.vim/bundle/tablify,~/.vim/bundle/interactive-replace,~/.vim/bundle/vim-bufferline,~/.vim/bundle/vim-startify,~/.vim/bundle/neocomplcache,~/.vim/bundle/neosnippet,~/.vim/bundle/indentLine,~/.vim/bundle/tabular,~/.vim/bundle/vim-multiedit,~/.vim/bundle/vim-snippets,~/.vim/bundle/auto-pairs,~/.vim/bundle/rainbow_parentheses.vim,~/.vim/bundle/nerdcommenter,~/.vim/bundle/syntastic,~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-surround,~/.vim/bundle/SyntaxComplete,~/.vim/bundle/vim-misc,~/.vim/bundle/vim-easytags,~/.vim/bundle/tagbar,~/.vim/bundle/Vim-PHP-Stuff,~/.vim/bundle/vim-coffee-script,~/.vim/bundle/javascript-libraries-syntax.vim,~/.vim/bundle/vim-web-indent,~/.vim/bundle/zencoding-vim,~/.vim/bundle/vim-less,~/.vim/bundle/markdown-preview.vim,~/.vim/bundle/vim-markdown,~/.vim/bundle/vim-colors-solarized,~/.vim/bundle/gruvbox,~/.vim/bundle/harlequin,~/.vim/bundle/badwolf,~/.vim/bundle/vim-kolor,~/.vim,~/.vim/bundle/SyntaxComplete,~/.vim/bundle/Vim-PHP-Stuff,~/.vim/bundle/auto-pairs,~/.vim/bundle/badwolf,~/.vim/bundle/ctrlp.vim,~/.vim/bundle/dwm.vim,~/.vim/bundle/gruvbox,~/.vim/bundle/harlequin,~/.vim/bundle/indentLine,~/.vim/bundle/interactive-replace,~/.vim/bundle/javascript-libraries-syntax.vim,~/.vim/bundle/markdown-preview.vim,~/.vim/bundle/matchit.zip,~/.vim/bundle/neocomplcache,~/.vim/bundle/neosnippet,~/.vim/bundle/nerdcommenter,~/.vim/bundle/nerdtree,~/.vim/bundle/powerline,~/.vim/bundle/rainbow_parentheses.vim,~/.vim/bundle/syntastic,~/.vim/bundle/tablify,~/.vim/bundle/tabular,~/.vim/bundle/tagbar,~/.vim/bundle/undotree,~/.vim/bundle/vim-bufferline,~/.vim/bundle/vim-coffee-script,~/.vim/bundle/vim-colors-solarized,~/.vim/bundle/vim-easymotion,~/.vim/bundle/vim-easytags,~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-kolor,~/.vim/bundle/vim-less,~/.vim/bundle/vim-markdown,~/.vim/bundle/vim-misc,~/.vim/bundle/vim-multiedit,~/.vim/bundle/vim-nerdtree-tabs,~/.vim/bundle/vim-snippets,~/.vim/bundle/vim-startify,~/.vim/bundle/vim-surround,~/.vim/bundle/vim-web-indent,~/.vim/bundle/zencoding-vim,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim/bundle/indentLine/after,~/.vim/bundle/javascript-libraries-syntax.vim/after,~/.vim/bundle/tabular/after,~/.vim/bundle/vim-coffee-script/after,~/.vim/after,~/.vim/bundle/vundle/,~/.vim/bundle/vundle/after,~/.vim/bundle/powerline/after,~/.vim/bundle/vim-easymotion/after,~/.vim/bundle/nerdtree/after,~/.vim/bundle/vim-nerdtree-tabs/after,~/.vim/bundle/ctrlp.vim/after,~/.vim/bundle/matchit.zip/after,~/.vim/bundle/undotree/after,~/.vim/bundle/dwm.vim/after,~/.vim/bundle/tablify/after,~/.vim/bundle/interactive-replace/after,~/.vim/bundle/vim-bufferline/after,~/.vim/bundle/vim-startify/after,~/.vim/bundle/neocomplcache/after,~/.vim/bundle/neosnippet/after,~/.vim/bundle/indentLine/after,~/.vim/bundle/tabular/after,~/.vim/bundle/vim-multiedit/after,~/.vim/bundle/vim-snippets/after,~/.vim/bundle/auto-pairs/after,~/.vim/bundle/rainbow_parentheses.vim/after,~/.vim/bundle/nerdcommenter/after,~/.vim/bundle/syntastic/after,~/.vim/bundle/vim-fugitive/after,~/.vim/bundle/vim-surround/after,~/.vim/bundle/SyntaxComplete/after,~/.vim/bundle/vim-misc/after,~/.vim/bundle/vim-easytags/after,~/.vim/bundle/tagbar/after,~/.vim/bundle/Vim-PHP-Stuff/after,~/.vim/bundle/vim-coffee-script/after,~/.vim/bundle/javascript-libraries-syntax.vim/after,~/.vim/bundle/vim-web-indent/after,~/.vim/bundle/zencoding-vim/after,~/.vim/bundle/vim-less/after,~/.vim/bundle/markdown-preview.vim/after,~/.vim/bundle/vim-markdown/after,~/.vim/bundle/vim-colors-solarized/after,~/.vim/bundle/gruvbox/after,~/.vim/bundle/harlequin/after,~/.vim/bundle/badwolf/after,~/.vim/bundle/vim-kolor/after,~/.vim/bundle/powerline/powerline/bindings/vim
set scrolloff=3
set shiftwidth=2
set showbreak=↪\ 
set showmatch
set sidescroll=1
set sidescrolloff=7
set smartcase
set smarttab
set softtabstop=2
set nostartofline
set statusline=%!pyeval('powerline.new_window()')
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.pdf,.exe
set noswapfile
set switchbuf=useopen
set tabstop=2
set tags=./.tags;,~/.vim/.tags
set termencoding=utf-8
set title
set undodir=~/.vim/.undofile
set undofile
set undolevels=100
set viminfo='20,\"80
set visualbell
set wildignore=*.o,*.a,*.so,*.obj,*.exe,*.lib,*.app,*/.git/*,*/.hg/*,*/.svn/*
set wildmenu
set wildmode=longest:full,list:full
set window=48
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +0 Github/siema/application/views/includes/topbar.php
silent! argdel *
edit Github/siema/application/views/includes/topbar.php
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
3wincmd h
wincmd w
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 89 + 179) / 358)
exe 'vert 2resize ' . ((&columns * 89 + 179) / 358)
exe 'vert 3resize ' . ((&columns * 88 + 179) / 358)
exe 'vert 4resize ' . ((&columns * 89 + 179) / 358)
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> <expr> ð AutoPairsToggle()
inoremap <buffer> <silent> â =AutoPairsBackInsert()
inoremap <buffer> <silent> å =AutoPairsFastWrap()
onoremap <buffer> <silent> [[ ?\(.*\%#\)\@!\_^\s*\zs\(\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\|\(abstract\s\+\|final\s\+\)*class\|interface\)?:nohls
nnoremap <buffer> <silent> [[ ?\(.*\%#\)\@!\_^\s*\zs\(\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\|\(abstract\s\+\|final\s\+\)*class\|interface\)?:nohls
onoremap <buffer> <silent> ]] /\(.*\%#\)\@!\_^\s*\zs\(\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\|\(abstract\s\+\|final\s\+\)*class\|interface\)/:nohls
nnoremap <buffer> <silent> ]] /\(.*\%#\)\@!\_^\s*\zs\(\(abstract\s\+\|final\s\+\|private\s\+\|protected\s\+\|public\s\+\|static\s\+\)*function\|\(abstract\s\+\|final\s\+\)*class\|interface\)/:nohls
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
noremap <buffer> <silent> ð :call AutoPairsToggle()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,:#
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
set concealcursor=inc
setlocal concealcursor=inc
set conceallevel=1
setlocal conceallevel=1
setlocal completefunc=neocomplcache#complete#manual_complete
setlocal copyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'php'
setlocal filetype=php
endif
set foldcolumn=2
setlocal foldcolumn=2
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=1
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
set foldnestmax=10
setlocal foldnestmax=10
set foldtext=MyFoldText()
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=lqrowcb
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=\\(require\\|include\\)\\(_once\\)\\?
setlocal includeexpr=
setlocal indentexpr=GetPhpIndent()
setlocal indentkeys=0{,0},0),:,!^F,o,O,e,*<Return>,=?>,=<?,=*/
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=phpcomplete#CompletePHP
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!pyeval('powerline.statusline(4)')
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'php'
setlocal syntax=php
endif
setlocal tabstop=4
setlocal tags=~/Github/siema/.git/php.tags,~/Github/siema/.git/tags,./.tags;,~/.vim/.tags
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
let s:l = 1 - ((0 * winheight(0) + 23) / 47)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
lcd ~/Github/siema/application/views/includes
wincmd w
argglobal
enew
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> <expr> ð AutoPairsToggle()
inoremap <buffer> <silent> â =AutoPairsBackInsert()
inoremap <buffer> <silent> å =AutoPairsFastWrap()
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
noremap <buffer> <silent> ð :call AutoPairsToggle()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
set concealcursor=inc
setlocal concealcursor=inc
set conceallevel=1
setlocal conceallevel=1
setlocal completefunc=neocomplcache#complete#manual_complete
setlocal copyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != ''
setlocal filetype=
endif
set foldcolumn=2
setlocal foldcolumn=2
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=1
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
set foldnestmax=10
setlocal foldnestmax=10
set foldtext=MyFoldText()
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!pyeval('powerline.statusline(3)')
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != ''
setlocal syntax=
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
lcd ~/
wincmd w
argglobal
enew
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> <expr> ð AutoPairsToggle()
inoremap <buffer> <silent> â =AutoPairsBackInsert()
inoremap <buffer> <silent> å =AutoPairsFastWrap()
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
noremap <buffer> <silent> ð :call AutoPairsToggle()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
set concealcursor=inc
setlocal concealcursor=inc
set conceallevel=1
setlocal conceallevel=1
setlocal completefunc=neocomplcache#complete#manual_complete
setlocal copyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != ''
setlocal filetype=
endif
set foldcolumn=2
setlocal foldcolumn=2
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=1
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
set foldnestmax=10
setlocal foldnestmax=10
set foldtext=MyFoldText()
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!pyeval('powerline.statusline(2)')
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != ''
setlocal syntax=
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
lcd ~/
wincmd w
argglobal
enew
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> <expr> ð AutoPairsToggle()
inoremap <buffer> <silent> â =AutoPairsBackInsert()
inoremap <buffer> <silent> å =AutoPairsFastWrap()
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
noremap <buffer> <silent> ð :call AutoPairsToggle()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
set concealcursor=inc
setlocal concealcursor=inc
set conceallevel=1
setlocal conceallevel=1
setlocal completefunc=neocomplcache#complete#manual_complete
setlocal copyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != ''
setlocal filetype=
endif
set foldcolumn=2
setlocal foldcolumn=2
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=1
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
set foldnestmax=10
setlocal foldnestmax=10
set foldtext=MyFoldText()
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!pyeval('powerline.statusline(1)')
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != ''
setlocal syntax=
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
lcd ~/
wincmd w
exe 'vert 1resize ' . ((&columns * 89 + 179) / 358)
exe 'vert 2resize ' . ((&columns * 89 + 179) / 358)
exe 'vert 3resize ' . ((&columns * 88 + 179) / 358)
exe 'vert 4resize ' . ((&columns * 89 + 179) / 358)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
